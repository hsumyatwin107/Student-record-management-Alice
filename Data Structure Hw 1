//Question number 2
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void sort_numbers(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int numbers[100], i;
    srand((unsigned int)time(NULL));

    for (i = 0; i < 100; i++) {
        numbers[i] = rand() % 100 + 1;
    }

    sort_numbers(numbers, 100);

    printf("Sorted Numbers in Descending Order:\n");
    for (i = 0; i < 100; i++) {
        printf("%d->", numbers[i]);
    }
    printf("\n");

    return 0;
}

//Question number 4

#include <stdio.h>
#include <stdlib.h>

//Define a node for the linked list
typedef struct Node {
    int studentNumber;
    char name[50];
    int age;
    struct Node* next;
} Node;

//Insert a new node at the end of the linked list
void insertNode(Node** head, int studentNumber, char* name, int age) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    newNode->studentNumber = studentNumber;
    strcpy(newNode->name, name);
    newNode->age = age;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
}

//Function to display the student information
void displayInformation(Node* node) {
    while (node != NULL) {
        printf("%d- %s %d %d\n", node->studentNumber, node->name, node->age, node->studentNumber);
        node = node->next;
    }
}

//Function to count the number of students
int countStudents(Node* node) {
    int count = 0;
    while (node != NULL) {
        count++;
        node = node->next;
    }
    return count;
}

int main() {
    Node* head = NULL;

    insertNode(&head, 201, "Saliha", 27);
    insertNode(&head, 203, "Ece", 19);

    displayInformation(head);
    printf("Total number of students: %d\n", countStudents(head));

    return 0;
}

//Question number 5

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int studentNumber;
    char name[50];
    int age;
} Student;

// Function to display the records
void display(Student *record) {
    printf("Student Number: %d\n", record->studentNumber);
    printf("Name: %s\n", record->name);
    printf("Age: %d\n", record->age);
}

// Function to search a record by student name
Student* search(Student* list, char* name) {
    while (list != NULL) {
        if (strcmp(list->name, name) == 0) {
            return list;
        }
        list = list->next;
    }
    return NULL;
}

int main() {
    // Initializing a list of students
    Student* studentList = (Student*) malloc(sizeof(Student));
    studentList->studentNumber = 201;
    strcpy(studentList->name, "Saliha");
    studentList->age = 27;

    // Searching a student by name
    char nameToSearch[50] = "Saliha";
    Student* foundStudent = search(studentList, nameToSearch);

    if (foundStudent != NULL) {
        printf("Found student:\n");
        display(foundStudent);
    } else {
        printf("Student not found.\n");
    }

    free(studentList);
    return 0;
}

//Question number 6

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// structure of node
typedef struct Node {
    char name[50];
    int age;
    struct Node* next;
} Node;

// function to delete next node from a given node
void deleteNextNode(Node* start, char* searchName) {
    Node* current = start;

    while (current != NULL) {
        if (strcmp(current->name, searchName) == 0) {
            Node* nextNext = current->next->next;
            free(current->next);
            current->next = nextNext;
            break;
        }
        current = current->next;
    }
}

// function to insert node at the end of the list
void insertNode(Node** head, char* name, int age) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    strcpy(newNode->name, name);
    newNode->age = age;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    Node* last = *head;
    while (last->next != NULL) {
        last = last->next;
    }

    last->next = newNode;
}

// function to print the list
void printList(Node* node) {
    while (node != NULL) {
        printf("Name: %s\n", node->name);
        printf("Age: %d\n", node->age);
        node = node->next;
    }
}

int main() {
    Node* head = NULL;

    insertNode(&head, "Alice", 25);
    insertNode(&head, "Bob", 30);
    insertNode(&head, "Charlie", 35);

    printList(head);

    deleteNextNode(head, "Bob");

    printf("\nList after deleting the next node:\n");
    printList(head);

    return 0;
}

//Question number 7

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// structure of node
typedef struct Node {
    char name[50];
    int age;
    struct Node* next;
} Node;

// function to insert node at the end of the list
void insertNode(Node** head, char* name, int age) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    strcpy(newNode->name, name);
    newNode->age = age;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    Node* last = *head;
    while (last->next != NULL) {
        last = last->next;
    }

    last->next = newNode;
}

// function to print the list
void printList(Node* node) {
    while (node != NULL) {
        printf("Name: %s\n", node->name);
        printf("Age: %d\n", node->age);
        node = node->next;
    }
}

// function to find the longest name in the list
void findLongestName(Node* head) {
    Node* longestNode = head;
    Node* current = head;

    while (current != NULL) {
        if (strlen(current->name) > strlen(longestNode->name)) {
            longestNode = current;
        }
        current = current->next;
    }

    printf("The longest name in the list: %s\n", longestNode->name);
    printf("Length: %d\n", (int)strlen(longestNode->name));
}

int main() {
    Node* head = NULL;

    insertNode(&head, "Alice", 25);
    insertNode(&head, "Bob", 30);
    insertNode(&head, "Charlie", 35);
    insertNode(&head, "Abdurrahmangazi", 40);

    printList(head);

    printf("\nLongest name in the list:\n");
    findLongestName(head);

    return 0;
}
